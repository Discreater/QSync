syntax = "proto3";

package musync;
import "google/protobuf/timestamp.proto";

message Playlist {
  int64 id = 1;
  int64 owner_id = 2;
  repeated int64 track_ids = 3;
  string name = 4;
  string description = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;
}

message CurrentPlaylist {
  int64 id = 1;
  int64 playlist_id = 2;
  int64 user_id = 3;
  int64 current_track_id = 4;
  bool playing = 5;
  google.protobuf.Timestamp started_at = 6;
}

// Track
message Track {
  int64 id = 1;
  string name = 2;
  string artist = 3;
  string album = 4;
  optional LocalSource local_src = 5;
  optional NeteaseSource netease_src = 6;
}

// TODO: add fields
message NeteaseSource {
}

message LocalSource {
  string path = 1;
}

message User {
  int64 id = 1;
  string name = 2;
  string current_playlist_id = 3;
}

message CreatePlaylistRequest {
  Playlist playlist = 1;
}

message CreatePlaylistResponse {
  Playlist playlist = 1;
}

message DeletePlaylistsRequest {
  repeated int64 ids = 1;
}

// Query playlist by user id and track id
message PlaylistQuery {
  // If empty, query all playlists
  int64 user_id = 1;
  // If empty, query all playlists
  int64 track_id = 2;
  string name = 3;
}

message QueryPlaylistRequest {
  PlaylistQuery query = 1;
}

// Update playlist: add/remove tracks, update name and description
message UpdatePlaylistRequest {
  int64 id = 1;
  repeated int64 added_track_ids = 2;
  repeated int64 removed_track_ids = 3;
  optional string name = 4;
  optional string description = 5;
}

// Updated playlist will be returned in response
message UpdatePlaylistResponse {
  Playlist playlist = 1;
}

message CreateTrackRequest {
  Track track = 1;
}

message CreateTrackResponse {
  Track track = 1;
}

message TrackQuery {
  int64 playlist_id = 1;
  string name = 2;
  string artist = 3;
  string ablum = 4;
}

message QueryTracksRequest {
  TrackQuery query = 1;
}

message UpdateTrackRequest {
  int64 id = 1;
  string name = 2;
  string artist = 3;
  string album = 4;
  optional LocalSource local_src = 5;
  optional NeteaseSource netease_src = 6;
}

message UpdateTrackResponse {
  Track track = 1;
}

message DeleteTracksRequest {
  repeated int64 track_ids = 1;
}

message CreateUserRequest {
  User user = 1;
}

message CreateUserResponse {
  User user = 1;
}

message QueryUserRequest {
  int64 id = 1;
  string name = 2;
}

message UpdateUserRequest {
  int64 id = 1;
  string name = 2;
  int64 current_playlist_id = 3;
}

message UpdateUserResponse {
  User user = 1;
}

message DeleteUsersRequest {
  repeated int64 ids = 1;
}

service MusyncService {
  rpc createPlaylist(CreatePlaylistRequest) returns (CreatePlaylistResponse);
  rpc queryPlaylist(QueryPlaylistRequest) returns (stream Playlist);
  rpc deletePlaylists(DeletePlaylistsRequest) returns (stream Playlist);
  rpc updatePlaylist(UpdatePlaylistRequest) returns (UpdatePlaylistResponse);

  rpc createTrack(CreateTrackRequest) returns (CreateTrackResponse);
  rpc queryTracks(QueryTracksRequest) returns (stream Track);
  rpc updateTrack(UpdateTrackRequest) returns (UpdateTrackResponse);
  rpc deleteTracks(DeleteTracksRequest) returns (stream Track);

  rpc createUser(CreateUserRequest) returns (CreateUserResponse);
  rpc queryUser(QueryUserRequest) returns (stream User);
  rpc updateUser(UpdateUserRequest) returns (UpdateUserResponse);
  rpc deleteUsers(DeleteUsersRequest) returns (stream User);
}
