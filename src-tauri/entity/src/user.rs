//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub struct Model {
  #[sea_orm(primary_key)]
  pub id: i32,
  pub name: String,
  pub play_queue_id: Option<i32>,
  pub created_at: DateTimeUtc,
  pub updated_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(
    belongs_to = "super::play_queue::Entity",
    from = "Column::PlayQueueId",
    to = "super::play_queue::Column::Id",
    on_update = "NoAction",
    on_delete = "NoAction"
  )]
  PlayQueue,
  #[sea_orm(has_many = "super::playlist::Entity")]
  Playlist,
  #[sea_orm(has_many = "super::user_playlist::Entity")]
  UserPlaylist,
}

impl Related<super::play_queue::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::PlayQueue.def()
  }
}

impl Related<super::user_playlist::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::UserPlaylist.def()
  }
}

impl Related<super::playlist::Entity> for Entity {
  fn to() -> RelationDef {
    super::user_playlist::Relation::Playlist.def()
  }
  fn via() -> Option<RelationDef> {
    Some(super::user_playlist::Relation::User.def().rev())
  }
}

impl ActiveModelBehavior for ActiveModel {}
