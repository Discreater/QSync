syntax = "proto3";

package musync;
import "google/protobuf/timestamp.proto";

// Playlist
message Playlist {
  // unique id for the playlist
  int32 id = 1;
  // id of the owner of the playlist
  int32 owner_id = 2;
  // ids of tracks in the playlist
  repeated int32 track_ids = 3;
  // name of the playlist
  string name = 4;
  // description of the playlist
  string description = 5;
  // time when the playlist is created
  google.protobuf.Timestamp created_at = 6;
  // time of the last update
  google.protobuf.Timestamp updated_at = 7;
}

// CurrentPlaylist controller
message PlayQueue {
  // unique id for the current playlist
  int32 id = 1;
  // ids of tracks in the playlist
  repeated int32 track_ids = 2;
  // index of the current playing track in the playlist
  uint32 position = 3;
  // is the playlist playing
  bool playing = 4;
  // time when the current track started playing.
  google.protobuf.Timestamp started_at = 5;
  // progress of the current track when the play queu is paused. In milliseconds
  uint32 paused_at = 6;
}

// Track
message Track {
  // unique id for the track
  int32 id = 1;
  // title of the track
  string title = 2;
  // artist of the track
  optional string artist = 3;
  // album of the track
  optional string album = 4;
  // duration of the track in milliseconds
  optional uint32 duration = 5;
  // genre of the track
  optional string genre = 6;
  // year of the track
  optional uint32 year = 7;
  // time when the track is created
  google.protobuf.Timestamp created_at = 8;
  // time of the last update
  google.protobuf.Timestamp updated_at = 9;
  // local source of the track
  optional LocalSource local_src = 10;
  // netease source of the track
  optional NeteaseSource netease_src = 11;
}

// NeteaseSource, not implemented yet
message NeteaseSource {
  // id of the track in netease
  string id = 1;
}

// LocalSource
message LocalSource {
  // path of the track
  string path = 1;
}

// User
message User {
  // unique id for the user
  int32 id = 1;
  // name of the user
  string name = 2;
  // time when the user is created
  google.protobuf.Timestamp created_at = 3;
  // time of the last update
  google.protobuf.Timestamp updated_at = 4;
}

// Token
message Token {
  string data = 1;
  string type = 2;
}

// Cover
message Picture {
  // picture type according to ID3v2 APIC
  optional string pic_type = 1;
  string mime_type = 2;
  optional string description = 3;
  // base64 picture data
  string data = 4;
}

// Create playlist request
message CreatePlaylistRequest {
  // ids of tracks in the playlist
  repeated int32 track_ids = 1;
  // name of the playlist
  string name = 2;
  // description of the playlist
  string description = 3;
}

// Create playlist response
message CreatePlaylistResponse {
  // Created playlist
  Playlist playlist = 1;
}

// Delete playlist request
message DeletePlaylistsRequest {
  // Ids of playlists to be deleted
  repeated int32 ids = 1;
}

// Query playlist by user id and track id
message QueryPlaylistsRequest {
  // which user has the playlist
  optional int32 user_id = 1;
  // Query by contained track id
  optional int32 track_id = 2;
  // Query by name
  optional string name = 3;
}

// Update playlist: add/remove tracks, update name and description
message UpdatePlaylistRequest {
  // Id of the playlist to be updated
  int32 id = 1;
  // Ids of tracks to be added
  repeated int32 added_track_ids = 2;
  // Ids of tracks to be removed
  repeated int32 removed_track_ids = 3;
  // New name of the playlist
  optional string name = 4;
  // New description of the playlist
  optional string description = 5;
}

// Updated playlist will be returned in response
message UpdatePlaylistResponse {
  // Updated playlist
  Playlist playlist = 1;
}

// Create track request
message CreateTrackRequest {
  // Track to be created
  Track track = 1;
}

// Create track response
message CreateTrackResponse {
  // Created track
  Track track = 1;
}

// Query track
message QueryTracksRequest {
  // Query by which playlist contains the track
  optional int32 playlist_id = 1;
  // Query by title
  optional string title = 2;
  // Query by artist
  optional string artist = 3;
  // Query by album
  optional string album = 4;
  // Query by genre
  optional string genre = 5;
  // Query by year
  optional uint32 year = 6;
}

message TrackUpdate {
  // Id of the track to be updated
  int32 id = 1;
  // New title of the track
  optional string title = 2;
  // New artist of the track
  optional string artist = 3;
  // New album of the track
  optional string album = 4;
  optional uint32 duration = 5;
  // New genre of the track
  optional string genre = 6;
  // New year of the track
  optional uint32 year = 7;
  // New local source of the track
  optional LocalSource local_src = 8;
  // New netease source of the track
  optional NeteaseSource netease_src = 9;
}

// Update track request
message UpdateTrackRequest { TrackUpdate update = 1; }

// Update track response
message UpdateTrackResponse {
  // Updated track
  Track track = 1;
}

// Delete tracks request
message DeleteTracksRequest {
  // Ids of tracks to be deleted
  repeated int32 track_ids = 1;
}

// Create user request
message CreateUserRequest {
  // User to be created
  User user = 1;
}

// Create user response
message CreateUserResponse {
  // Created user
  User user = 1;
}

// Query user
message QueryUsersRequest {
  // Query by name
  optional string name = 1;
}

message UserUpdate {
  // Id of the user to be updated
  int32 id = 1;
  // New name of the user
  string name = 2;
}

// Update user request
message UpdateUserRequest { UserUpdate update = 1; }

// Update user response
message UpdateUserResponse {
  // Updated user
  User user = 1;
}

// Delete users request
message DeleteUsersRequest {
  // Ids of users to be deleted
  repeated int32 ids = 1;
}

message LoginRequest {
  string name = 1;
  string type = 2;
}

message AddLocalFolderRequest { string path = 1; }
message RemoveLocalFolderRequest { string path = 1; }
message AddLocalFolderResponse { uint32 added_tracks = 1; }
message RemoveLocalFolderResponse { uint32 removed_tracks = 1; }

message GetTrackRequest { int32 id = 1; }
message GetTrackCoverRequest {
  int32 track_id = 1;
  optional uint32 cover_idx = 2;
}

message QueryLocalFoldersRequest {}
message LocalFolder { string path = 1; }

message CreatePlayQueueRequest {
  repeated int32 track_ids = 1;
}

message CreatePlayQueueResponse {
  int32 play_queue_id = 1;
}

// Currently, users can only get thier own play queue
message GetPlayQueueRequest {}

message UpdatePlayerRequest {
  // is the update triggerred by user action.
  // If this is false, it won't be broadcasted to other users.
  // Otherwise, it will be broadcasted to other users.
  bool manul = 1;
  // index of the current playing track in the playlist
  optional uint32 position = 2;
  // is the playlist playing
  optional bool playing = 3;
  // Move the seek bar to the specified position.
  optional uint32 progress = 4;
}
message UpdatePlayQueueEvent {
  repeated int32 track_ids = 1;
}

message UpdatePlayerEvent {
  uint32 position = 1;
  bool playing = 2;
  uint32 progress = 3;
}

message SearchAllRequest {
  string query = 1;
}

message SearchAllResponse {
  repeated Track db_tracks = 1;
  // netease music search result
  string ncm_res = 2;
}

// Musync service
service MusyncService {
  rpc Login(LoginRequest) returns (Token);

  rpc AddLocalFolder(AddLocalFolderRequest) returns (AddLocalFolderResponse);
  rpc RemoveLocalFolder(RemoveLocalFolderRequest)
      returns (RemoveLocalFolderResponse);
  rpc QueryLocalFolders(QueryLocalFoldersRequest) returns (stream LocalFolder);

  rpc CreatePlayQueue(CreatePlayQueueRequest) returns (CreatePlayQueueResponse);
  rpc GetPlayQueue(GetPlayQueueRequest) returns (PlayQueue);

  rpc CreatePlaylist(CreatePlaylistRequest) returns (CreatePlaylistResponse);
  rpc QueryPlaylists(QueryPlaylistsRequest) returns (stream Playlist);
  rpc UpdatePlaylist(UpdatePlaylistRequest) returns (UpdatePlaylistResponse);
  rpc DeletePlaylists(DeletePlaylistsRequest) returns (stream Playlist);

  rpc GetTrack(GetTrackRequest) returns (Track);
  rpc GetTrackCover(GetTrackCoverRequest) returns (Picture);
  rpc CreateTrack(CreateTrackRequest) returns (CreateTrackResponse);
  rpc QueryTracks(QueryTracksRequest) returns (stream Track);
  rpc UpdateTrack(UpdateTrackRequest) returns (UpdateTrackResponse);
  rpc DeleteTracks(DeleteTracksRequest) returns (stream Track);

  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  rpc QueryUsers(QueryUsersRequest) returns (stream User);
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
  rpc DeleteUsers(DeleteUsersRequest) returns (stream User);
  
  rpc SearchAll(SearchAllRequest) returns (SearchAllResponse);
}
