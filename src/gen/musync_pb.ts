// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file musync.proto (package musync, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file musync.proto.
 */
export const file_musync: GenFile = /*@__PURE__*/
  fileDesc("CgxtdXN5bmMucHJvdG8SBm11c3luYyK+AQoIUGxheWxpc3QSCgoCaWQYASABKAUSEAoIb3duZXJfaWQYAiABKAUSEQoJdHJhY2tfaWRzGAMgAygFEgwKBG5hbWUYBCABKAkSEwoLZGVzY3JpcHRpb24YBSABKAkSLgoKY3JlYXRlZF9hdBgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLgoKdXBkYXRlZF9hdBgHIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAikAEKCVBsYXlRdWV1ZRIKCgJpZBgBIAEoBRIRCgl0cmFja19pZHMYAiADKAUSEAoIcG9zaXRpb24YAyABKA0SDwoHcGxheWluZxgEIAEoCBIuCgpzdGFydGVkX2F0GAUgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIRCglwYXVzZWRfYXQYBiABKA0imgMKBVRyYWNrEgoKAmlkGAEgASgFEg0KBXRpdGxlGAIgASgJEhMKBmFydGlzdBgDIAEoCUgAiAEBEhIKBWFsYnVtGAQgASgJSAGIAQESFQoIZHVyYXRpb24YBSABKA1IAogBARISCgVnZW5yZRgGIAEoCUgDiAEBEhEKBHllYXIYByABKA1IBIgBARIuCgpjcmVhdGVkX2F0GAggASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIuCgp1cGRhdGVkX2F0GAkgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIrCglsb2NhbF9zcmMYCiABKAsyEy5tdXN5bmMuTG9jYWxTb3VyY2VIBYgBARIvCgtuZXRlYXNlX3NyYxgLIAEoCzIVLm11c3luYy5OZXRlYXNlU291cmNlSAaIAQFCCQoHX2FydGlzdEIICgZfYWxidW1CCwoJX2R1cmF0aW9uQggKBl9nZW5yZUIHCgVfeWVhckIMCgpfbG9jYWxfc3JjQg4KDF9uZXRlYXNlX3NyYyI1Cg1OZXRlYXNlU291cmNlEgoKAmlkGAEgASgJEhAKA3BvcBgCIAEoAkgAiAEBQgYKBF9wb3AiGwoLTG9jYWxTb3VyY2USDAoEcGF0aBgBIAEoCSKAAQoEVXNlchIKCgJpZBgBIAEoBRIMCgRuYW1lGAIgASgJEi4KCmNyZWF0ZWRfYXQYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEi4KCnVwZGF0ZWRfYXQYBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wIiMKBVRva2VuEgwKBGRhdGEYASABKAkSDAoEdHlwZRgCIAEoCSJ4CgdQaWN0dXJlEhUKCHBpY190eXBlGAEgASgJSACIAQESEQoJbWltZV90eXBlGAIgASgJEhgKC2Rlc2NyaXB0aW9uGAMgASgJSAGIAQESDAoEZGF0YRgEIAEoCUILCglfcGljX3R5cGVCDgoMX2Rlc2NyaXB0aW9uIk0KFUNyZWF0ZVBsYXlsaXN0UmVxdWVzdBIRCgl0cmFja19pZHMYASADKAUSDAoEbmFtZRgCIAEoCRITCgtkZXNjcmlwdGlvbhgDIAEoCSI8ChZDcmVhdGVQbGF5bGlzdFJlc3BvbnNlEiIKCHBsYXlsaXN0GAEgASgLMhAubXVzeW5jLlBsYXlsaXN0IiUKFkRlbGV0ZVBsYXlsaXN0c1JlcXVlc3QSCwoDaWRzGAEgAygFInkKFVF1ZXJ5UGxheWxpc3RzUmVxdWVzdBIUCgd1c2VyX2lkGAEgASgFSACIAQESFQoIdHJhY2tfaWQYAiABKAVIAYgBARIRCgRuYW1lGAMgASgJSAKIAQFCCgoIX3VzZXJfaWRCCwoJX3RyYWNrX2lkQgcKBV9uYW1lIp0BChVVcGRhdGVQbGF5bGlzdFJlcXVlc3QSCgoCaWQYASABKAUSFwoPYWRkZWRfdHJhY2tfaWRzGAIgAygFEhkKEXJlbW92ZWRfdHJhY2tfaWRzGAMgAygFEhEKBG5hbWUYBCABKAlIAIgBARIYCgtkZXNjcmlwdGlvbhgFIAEoCUgBiAEBQgcKBV9uYW1lQg4KDF9kZXNjcmlwdGlvbiI8ChZVcGRhdGVQbGF5bGlzdFJlc3BvbnNlEiIKCHBsYXlsaXN0GAEgASgLMhAubXVzeW5jLlBsYXlsaXN0IjIKEkNyZWF0ZVRyYWNrUmVxdWVzdBIcCgV0cmFjaxgBIAEoCzINLm11c3luYy5UcmFjayIzChNDcmVhdGVUcmFja1Jlc3BvbnNlEhwKBXRyYWNrGAEgASgLMg0ubXVzeW5jLlRyYWNrItgBChJRdWVyeVRyYWNrc1JlcXVlc3QSHAoLcGxheWxpc3RfaWQYASABKAVCAhgBSACIAQESEgoFdGl0bGUYAiABKAlIAYgBARITCgZhcnRpc3QYAyABKAlIAogBARISCgVhbGJ1bRgEIAEoCUgDiAEBEhIKBWdlbnJlGAUgASgJSASIAQESEQoEeWVhchgGIAEoDUgFiAEBQg4KDF9wbGF5bGlzdF9pZEIICgZfdGl0bGVCCQoHX2FydGlzdEIICgZfYWxidW1CCAoGX2dlbnJlQgcKBV95ZWFyIs8CCgtUcmFja1VwZGF0ZRIKCgJpZBgBIAEoBRISCgV0aXRsZRgCIAEoCUgAiAEBEhMKBmFydGlzdBgDIAEoCUgBiAEBEhIKBWFsYnVtGAQgASgJSAKIAQESFQoIZHVyYXRpb24YBSABKA1IA4gBARISCgVnZW5yZRgGIAEoCUgEiAEBEhEKBHllYXIYByABKA1IBYgBARIrCglsb2NhbF9zcmMYCCABKAsyEy5tdXN5bmMuTG9jYWxTb3VyY2VIBogBARIvCgtuZXRlYXNlX3NyYxgJIAEoCzIVLm11c3luYy5OZXRlYXNlU291cmNlSAeIAQFCCAoGX3RpdGxlQgkKB19hcnRpc3RCCAoGX2FsYnVtQgsKCV9kdXJhdGlvbkIICgZfZ2VucmVCBwoFX3llYXJCDAoKX2xvY2FsX3NyY0IOCgxfbmV0ZWFzZV9zcmMiOQoSVXBkYXRlVHJhY2tSZXF1ZXN0EiMKBnVwZGF0ZRgBIAEoCzITLm11c3luYy5UcmFja1VwZGF0ZSIzChNVcGRhdGVUcmFja1Jlc3BvbnNlEhwKBXRyYWNrGAEgASgLMg0ubXVzeW5jLlRyYWNrIigKE0RlbGV0ZVRyYWNrc1JlcXVlc3QSEQoJdHJhY2tfaWRzGAEgAygFIi8KEUNyZWF0ZVVzZXJSZXF1ZXN0EhoKBHVzZXIYASABKAsyDC5tdXN5bmMuVXNlciIwChJDcmVhdGVVc2VyUmVzcG9uc2USGgoEdXNlchgBIAEoCzIMLm11c3luYy5Vc2VyIi8KEVF1ZXJ5VXNlcnNSZXF1ZXN0EhEKBG5hbWUYASABKAlIAIgBAUIHCgVfbmFtZSImCgpVc2VyVXBkYXRlEgoKAmlkGAEgASgFEgwKBG5hbWUYAiABKAkiNwoRVXBkYXRlVXNlclJlcXVlc3QSIgoGdXBkYXRlGAEgASgLMhIubXVzeW5jLlVzZXJVcGRhdGUiMAoSVXBkYXRlVXNlclJlc3BvbnNlEhoKBHVzZXIYASABKAsyDC5tdXN5bmMuVXNlciIhChJEZWxldGVVc2Vyc1JlcXVlc3QSCwoDaWRzGAEgAygFIioKDExvZ2luUmVxdWVzdBIMCgRuYW1lGAEgASgJEgwKBHR5cGUYAiABKAkiJQoVQWRkTG9jYWxGb2xkZXJSZXF1ZXN0EgwKBHBhdGgYASABKAkiKAoYUmVtb3ZlTG9jYWxGb2xkZXJSZXF1ZXN0EgwKBHBhdGgYASABKAkiLgoWQWRkTG9jYWxGb2xkZXJSZXNwb25zZRIUCgxhZGRlZF90cmFja3MYASABKA0iMwoZUmVtb3ZlTG9jYWxGb2xkZXJSZXNwb25zZRIWCg5yZW1vdmVkX3RyYWNrcxgBIAEoDSIdCg9HZXRUcmFja1JlcXVlc3QSCgoCaWQYASABKAUiTgoUR2V0VHJhY2tDb3ZlclJlcXVlc3QSEAoIdHJhY2tfaWQYASABKAUSFgoJY292ZXJfaWR4GAIgASgNSACIAQFCDAoKX2NvdmVyX2lkeCIaChhRdWVyeUxvY2FsRm9sZGVyc1JlcXVlc3QiGwoLTG9jYWxGb2xkZXISDAoEcGF0aBgBIAEoCSIrChZDcmVhdGVQbGF5UXVldWVSZXF1ZXN0EhEKCXRyYWNrX2lkcxgBIAMoBSIwChdDcmVhdGVQbGF5UXVldWVSZXNwb25zZRIVCg1wbGF5X3F1ZXVlX2lkGAEgASgFIhUKE0dldFBsYXlRdWV1ZVJlcXVlc3QijgEKE1VwZGF0ZVBsYXllclJlcXVlc3QSDQoFbWFudWwYASABKAgSFQoIcG9zaXRpb24YAiABKA1IAIgBARIUCgdwbGF5aW5nGAMgASgISAGIAQESFQoIcHJvZ3Jlc3MYBCABKA1IAogBAUILCglfcG9zaXRpb25CCgoIX3BsYXlpbmdCCwoJX3Byb2dyZXNzIikKFFVwZGF0ZVBsYXlRdWV1ZUV2ZW50EhEKCXRyYWNrX2lkcxgBIAMoBSJIChFVcGRhdGVQbGF5ZXJFdmVudBIQCghwb3NpdGlvbhgBIAEoDRIPCgdwbGF5aW5nGAIgASgIEhAKCHByb2dyZXNzGAMgASgNIiEKEFNlYXJjaEFsbFJlcXVlc3QSDQoFcXVlcnkYASABKAkiXgoRU2VhcmNoQWxsUmVzcG9uc2USIAoJZGJfdHJhY2tzGAEgAygLMg0ubXVzeW5jLlRyYWNrEiEKCm5jbV90cmFja3MYAyADKAsyDS5tdXN5bmMuVHJhY2tKBAgCEAMiFQoTUmVidWlsZEluZGV4UmVxdWVzdCInChRSZWJ1aWxkSW5kZXhSZXNwb25zZRIPCgdzdWNjZXNzGAEgASgIMoEMCg1NdXN5bmNTZXJ2aWNlEiwKBUxvZ2luEhQubXVzeW5jLkxvZ2luUmVxdWVzdBoNLm11c3luYy5Ub2tlbhJPCg5BZGRMb2NhbEZvbGRlchIdLm11c3luYy5BZGRMb2NhbEZvbGRlclJlcXVlc3QaHi5tdXN5bmMuQWRkTG9jYWxGb2xkZXJSZXNwb25zZRJYChFSZW1vdmVMb2NhbEZvbGRlchIgLm11c3luYy5SZW1vdmVMb2NhbEZvbGRlclJlcXVlc3QaIS5tdXN5bmMuUmVtb3ZlTG9jYWxGb2xkZXJSZXNwb25zZRJMChFRdWVyeUxvY2FsRm9sZGVycxIgLm11c3luYy5RdWVyeUxvY2FsRm9sZGVyc1JlcXVlc3QaEy5tdXN5bmMuTG9jYWxGb2xkZXIwARJSCg9DcmVhdGVQbGF5UXVldWUSHi5tdXN5bmMuQ3JlYXRlUGxheVF1ZXVlUmVxdWVzdBofLm11c3luYy5DcmVhdGVQbGF5UXVldWVSZXNwb25zZRI+CgxHZXRQbGF5UXVldWUSGy5tdXN5bmMuR2V0UGxheVF1ZXVlUmVxdWVzdBoRLm11c3luYy5QbGF5UXVldWUSTwoOQ3JlYXRlUGxheWxpc3QSHS5tdXN5bmMuQ3JlYXRlUGxheWxpc3RSZXF1ZXN0Gh4ubXVzeW5jLkNyZWF0ZVBsYXlsaXN0UmVzcG9uc2USQwoOUXVlcnlQbGF5bGlzdHMSHS5tdXN5bmMuUXVlcnlQbGF5bGlzdHNSZXF1ZXN0GhAubXVzeW5jLlBsYXlsaXN0MAESTwoOVXBkYXRlUGxheWxpc3QSHS5tdXN5bmMuVXBkYXRlUGxheWxpc3RSZXF1ZXN0Gh4ubXVzeW5jLlVwZGF0ZVBsYXlsaXN0UmVzcG9uc2USRQoPRGVsZXRlUGxheWxpc3RzEh4ubXVzeW5jLkRlbGV0ZVBsYXlsaXN0c1JlcXVlc3QaEC5tdXN5bmMuUGxheWxpc3QwARIyCghHZXRUcmFjaxIXLm11c3luYy5HZXRUcmFja1JlcXVlc3QaDS5tdXN5bmMuVHJhY2sSPgoNR2V0VHJhY2tDb3ZlchIcLm11c3luYy5HZXRUcmFja0NvdmVyUmVxdWVzdBoPLm11c3luYy5QaWN0dXJlEkYKC0NyZWF0ZVRyYWNrEhoubXVzeW5jLkNyZWF0ZVRyYWNrUmVxdWVzdBobLm11c3luYy5DcmVhdGVUcmFja1Jlc3BvbnNlEjoKC1F1ZXJ5VHJhY2tzEhoubXVzeW5jLlF1ZXJ5VHJhY2tzUmVxdWVzdBoNLm11c3luYy5UcmFjazABEkYKC1VwZGF0ZVRyYWNrEhoubXVzeW5jLlVwZGF0ZVRyYWNrUmVxdWVzdBobLm11c3luYy5VcGRhdGVUcmFja1Jlc3BvbnNlEjwKDERlbGV0ZVRyYWNrcxIbLm11c3luYy5EZWxldGVUcmFja3NSZXF1ZXN0Gg0ubXVzeW5jLlRyYWNrMAESQwoKQ3JlYXRlVXNlchIZLm11c3luYy5DcmVhdGVVc2VyUmVxdWVzdBoaLm11c3luYy5DcmVhdGVVc2VyUmVzcG9uc2USNwoKUXVlcnlVc2VycxIZLm11c3luYy5RdWVyeVVzZXJzUmVxdWVzdBoMLm11c3luYy5Vc2VyMAESQwoKVXBkYXRlVXNlchIZLm11c3luYy5VcGRhdGVVc2VyUmVxdWVzdBoaLm11c3luYy5VcGRhdGVVc2VyUmVzcG9uc2USOQoLRGVsZXRlVXNlcnMSGi5tdXN5bmMuRGVsZXRlVXNlcnNSZXF1ZXN0GgwubXVzeW5jLlVzZXIwARJACglTZWFyY2hBbGwSGC5tdXN5bmMuU2VhcmNoQWxsUmVxdWVzdBoZLm11c3luYy5TZWFyY2hBbGxSZXNwb25zZRJJCgxSZWJ1aWxkSW5kZXgSGy5tdXN5bmMuUmVidWlsZEluZGV4UmVxdWVzdBocLm11c3luYy5SZWJ1aWxkSW5kZXhSZXNwb25zZWIGcHJvdG8z", [file_google_protobuf_timestamp]);

/**
 * Playlist
 *
 * @generated from message musync.Playlist
 */
export type Playlist = Message<"musync.Playlist"> & {
  /**
   * unique id for the playlist
   *
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * id of the owner of the playlist
   *
   * @generated from field: int32 owner_id = 2;
   */
  ownerId: number;

  /**
   * ids of tracks in the playlist
   *
   * @generated from field: repeated int32 track_ids = 3;
   */
  trackIds: number[];

  /**
   * name of the playlist
   *
   * @generated from field: string name = 4;
   */
  name: string;

  /**
   * description of the playlist
   *
   * @generated from field: string description = 5;
   */
  description: string;

  /**
   * time when the playlist is created
   *
   * @generated from field: google.protobuf.Timestamp created_at = 6;
   */
  createdAt?: Timestamp;

  /**
   * time of the last update
   *
   * @generated from field: google.protobuf.Timestamp updated_at = 7;
   */
  updatedAt?: Timestamp;
};

/**
 * Describes the message musync.Playlist.
 * Use `create(PlaylistSchema)` to create a new message.
 */
export const PlaylistSchema: GenMessage<Playlist> = /*@__PURE__*/
  messageDesc(file_musync, 0);

/**
 * CurrentPlaylist controller
 *
 * @generated from message musync.PlayQueue
 */
export type PlayQueue = Message<"musync.PlayQueue"> & {
  /**
   * unique id for the current playlist
   *
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * ids of tracks in the playlist
   *
   * @generated from field: repeated int32 track_ids = 2;
   */
  trackIds: number[];

  /**
   * index of the current playing track in the playlist
   *
   * @generated from field: uint32 position = 3;
   */
  position: number;

  /**
   * is the playlist playing
   *
   * @generated from field: bool playing = 4;
   */
  playing: boolean;

  /**
   * time when the current track started playing.
   *
   * @generated from field: google.protobuf.Timestamp started_at = 5;
   */
  startedAt?: Timestamp;

  /**
   * progress of the current track when the play queu is paused. In milliseconds
   *
   * @generated from field: uint32 paused_at = 6;
   */
  pausedAt: number;
};

/**
 * Describes the message musync.PlayQueue.
 * Use `create(PlayQueueSchema)` to create a new message.
 */
export const PlayQueueSchema: GenMessage<PlayQueue> = /*@__PURE__*/
  messageDesc(file_musync, 1);

/**
 * Track
 *
 * @generated from message musync.Track
 */
export type Track = Message<"musync.Track"> & {
  /**
   * unique id for the track
   *
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * title of the track
   *
   * @generated from field: string title = 2;
   */
  title: string;

  /**
   * artist of the track
   *
   * @generated from field: optional string artist = 3;
   */
  artist?: string;

  /**
   * album of the track
   *
   * @generated from field: optional string album = 4;
   */
  album?: string;

  /**
   * duration of the track in milliseconds
   *
   * @generated from field: optional uint32 duration = 5;
   */
  duration?: number;

  /**
   * genre of the track
   *
   * @generated from field: optional string genre = 6;
   */
  genre?: string;

  /**
   * year of the track
   *
   * @generated from field: optional uint32 year = 7;
   */
  year?: number;

  /**
   * time when the track is created
   *
   * @generated from field: google.protobuf.Timestamp created_at = 8;
   */
  createdAt?: Timestamp;

  /**
   * time of the last update
   *
   * @generated from field: google.protobuf.Timestamp updated_at = 9;
   */
  updatedAt?: Timestamp;

  /**
   * local source of the track
   *
   * @generated from field: optional musync.LocalSource local_src = 10;
   */
  localSrc?: LocalSource;

  /**
   * netease source of the track
   *
   * @generated from field: optional musync.NeteaseSource netease_src = 11;
   */
  neteaseSrc?: NeteaseSource;
};

/**
 * Describes the message musync.Track.
 * Use `create(TrackSchema)` to create a new message.
 */
export const TrackSchema: GenMessage<Track> = /*@__PURE__*/
  messageDesc(file_musync, 2);

/**
 * NeteaseSource, not implemented yet
 *
 * @generated from message musync.NeteaseSource
 */
export type NeteaseSource = Message<"musync.NeteaseSource"> & {
  /**
   * id of the track in netease
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * popularity of the track
   *
   * @generated from field: optional float pop = 2;
   */
  pop?: number;
};

/**
 * Describes the message musync.NeteaseSource.
 * Use `create(NeteaseSourceSchema)` to create a new message.
 */
export const NeteaseSourceSchema: GenMessage<NeteaseSource> = /*@__PURE__*/
  messageDesc(file_musync, 3);

/**
 * LocalSource
 *
 * @generated from message musync.LocalSource
 */
export type LocalSource = Message<"musync.LocalSource"> & {
  /**
   * path of the track
   *
   * @generated from field: string path = 1;
   */
  path: string;
};

/**
 * Describes the message musync.LocalSource.
 * Use `create(LocalSourceSchema)` to create a new message.
 */
export const LocalSourceSchema: GenMessage<LocalSource> = /*@__PURE__*/
  messageDesc(file_musync, 4);

/**
 * User
 *
 * @generated from message musync.User
 */
export type User = Message<"musync.User"> & {
  /**
   * unique id for the user
   *
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * name of the user
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * time when the user is created
   *
   * @generated from field: google.protobuf.Timestamp created_at = 3;
   */
  createdAt?: Timestamp;

  /**
   * time of the last update
   *
   * @generated from field: google.protobuf.Timestamp updated_at = 4;
   */
  updatedAt?: Timestamp;
};

/**
 * Describes the message musync.User.
 * Use `create(UserSchema)` to create a new message.
 */
export const UserSchema: GenMessage<User> = /*@__PURE__*/
  messageDesc(file_musync, 5);

/**
 * Token
 *
 * @generated from message musync.Token
 */
export type Token = Message<"musync.Token"> & {
  /**
   * @generated from field: string data = 1;
   */
  data: string;

  /**
   * @generated from field: string type = 2;
   */
  type: string;
};

/**
 * Describes the message musync.Token.
 * Use `create(TokenSchema)` to create a new message.
 */
export const TokenSchema: GenMessage<Token> = /*@__PURE__*/
  messageDesc(file_musync, 6);

/**
 * Cover
 *
 * @generated from message musync.Picture
 */
export type Picture = Message<"musync.Picture"> & {
  /**
   * picture type according to ID3v2 APIC
   *
   * @generated from field: optional string pic_type = 1;
   */
  picType?: string;

  /**
   * @generated from field: string mime_type = 2;
   */
  mimeType: string;

  /**
   * @generated from field: optional string description = 3;
   */
  description?: string;

  /**
   * base64 picture data
   *
   * @generated from field: string data = 4;
   */
  data: string;
};

/**
 * Describes the message musync.Picture.
 * Use `create(PictureSchema)` to create a new message.
 */
export const PictureSchema: GenMessage<Picture> = /*@__PURE__*/
  messageDesc(file_musync, 7);

/**
 * Create playlist request
 *
 * @generated from message musync.CreatePlaylistRequest
 */
export type CreatePlaylistRequest = Message<"musync.CreatePlaylistRequest"> & {
  /**
   * ids of tracks in the playlist
   *
   * @generated from field: repeated int32 track_ids = 1;
   */
  trackIds: number[];

  /**
   * name of the playlist
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * description of the playlist
   *
   * @generated from field: string description = 3;
   */
  description: string;
};

/**
 * Describes the message musync.CreatePlaylistRequest.
 * Use `create(CreatePlaylistRequestSchema)` to create a new message.
 */
export const CreatePlaylistRequestSchema: GenMessage<CreatePlaylistRequest> = /*@__PURE__*/
  messageDesc(file_musync, 8);

/**
 * Create playlist response
 *
 * @generated from message musync.CreatePlaylistResponse
 */
export type CreatePlaylistResponse = Message<"musync.CreatePlaylistResponse"> & {
  /**
   * Created playlist
   *
   * @generated from field: musync.Playlist playlist = 1;
   */
  playlist?: Playlist;
};

/**
 * Describes the message musync.CreatePlaylistResponse.
 * Use `create(CreatePlaylistResponseSchema)` to create a new message.
 */
export const CreatePlaylistResponseSchema: GenMessage<CreatePlaylistResponse> = /*@__PURE__*/
  messageDesc(file_musync, 9);

/**
 * Delete playlist request
 *
 * @generated from message musync.DeletePlaylistsRequest
 */
export type DeletePlaylistsRequest = Message<"musync.DeletePlaylistsRequest"> & {
  /**
   * Ids of playlists to be deleted
   *
   * @generated from field: repeated int32 ids = 1;
   */
  ids: number[];
};

/**
 * Describes the message musync.DeletePlaylistsRequest.
 * Use `create(DeletePlaylistsRequestSchema)` to create a new message.
 */
export const DeletePlaylistsRequestSchema: GenMessage<DeletePlaylistsRequest> = /*@__PURE__*/
  messageDesc(file_musync, 10);

/**
 * Query playlist by user id and track id
 *
 * @generated from message musync.QueryPlaylistsRequest
 */
export type QueryPlaylistsRequest = Message<"musync.QueryPlaylistsRequest"> & {
  /**
   * which user has the playlist
   *
   * @generated from field: optional int32 user_id = 1;
   */
  userId?: number;

  /**
   * Query by contained track id
   *
   * @generated from field: optional int32 track_id = 2;
   */
  trackId?: number;

  /**
   * Query by name
   *
   * @generated from field: optional string name = 3;
   */
  name?: string;
};

/**
 * Describes the message musync.QueryPlaylistsRequest.
 * Use `create(QueryPlaylistsRequestSchema)` to create a new message.
 */
export const QueryPlaylistsRequestSchema: GenMessage<QueryPlaylistsRequest> = /*@__PURE__*/
  messageDesc(file_musync, 11);

/**
 * Update playlist: add/remove tracks, update name and description
 *
 * @generated from message musync.UpdatePlaylistRequest
 */
export type UpdatePlaylistRequest = Message<"musync.UpdatePlaylistRequest"> & {
  /**
   * Id of the playlist to be updated
   *
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * Ids of tracks to be added
   *
   * @generated from field: repeated int32 added_track_ids = 2;
   */
  addedTrackIds: number[];

  /**
   * Ids of tracks to be removed
   *
   * @generated from field: repeated int32 removed_track_ids = 3;
   */
  removedTrackIds: number[];

  /**
   * New name of the playlist
   *
   * @generated from field: optional string name = 4;
   */
  name?: string;

  /**
   * New description of the playlist
   *
   * @generated from field: optional string description = 5;
   */
  description?: string;
};

/**
 * Describes the message musync.UpdatePlaylistRequest.
 * Use `create(UpdatePlaylistRequestSchema)` to create a new message.
 */
export const UpdatePlaylistRequestSchema: GenMessage<UpdatePlaylistRequest> = /*@__PURE__*/
  messageDesc(file_musync, 12);

/**
 * Updated playlist will be returned in response
 *
 * @generated from message musync.UpdatePlaylistResponse
 */
export type UpdatePlaylistResponse = Message<"musync.UpdatePlaylistResponse"> & {
  /**
   * Updated playlist
   *
   * @generated from field: musync.Playlist playlist = 1;
   */
  playlist?: Playlist;
};

/**
 * Describes the message musync.UpdatePlaylistResponse.
 * Use `create(UpdatePlaylistResponseSchema)` to create a new message.
 */
export const UpdatePlaylistResponseSchema: GenMessage<UpdatePlaylistResponse> = /*@__PURE__*/
  messageDesc(file_musync, 13);

/**
 * Create track request
 *
 * @generated from message musync.CreateTrackRequest
 */
export type CreateTrackRequest = Message<"musync.CreateTrackRequest"> & {
  /**
   * Track to be created
   *
   * @generated from field: musync.Track track = 1;
   */
  track?: Track;
};

/**
 * Describes the message musync.CreateTrackRequest.
 * Use `create(CreateTrackRequestSchema)` to create a new message.
 */
export const CreateTrackRequestSchema: GenMessage<CreateTrackRequest> = /*@__PURE__*/
  messageDesc(file_musync, 14);

/**
 * Create track response
 *
 * @generated from message musync.CreateTrackResponse
 */
export type CreateTrackResponse = Message<"musync.CreateTrackResponse"> & {
  /**
   * Created track
   *
   * @generated from field: musync.Track track = 1;
   */
  track?: Track;
};

/**
 * Describes the message musync.CreateTrackResponse.
 * Use `create(CreateTrackResponseSchema)` to create a new message.
 */
export const CreateTrackResponseSchema: GenMessage<CreateTrackResponse> = /*@__PURE__*/
  messageDesc(file_musync, 15);

/**
 * Query track
 *
 * @generated from message musync.QueryTracksRequest
 */
export type QueryTracksRequest = Message<"musync.QueryTracksRequest"> & {
  /**
   * Query by which playlist contains the track
   *
   * @generated from field: optional int32 playlist_id = 1 [deprecated = true];
   * @deprecated
   */
  playlistId?: number;

  /**
   * Query by title
   *
   * @generated from field: optional string title = 2;
   */
  title?: string;

  /**
   * Query by artist
   *
   * @generated from field: optional string artist = 3;
   */
  artist?: string;

  /**
   * Query by album
   *
   * @generated from field: optional string album = 4;
   */
  album?: string;

  /**
   * Query by genre
   *
   * @generated from field: optional string genre = 5;
   */
  genre?: string;

  /**
   * Query by year
   *
   * @generated from field: optional uint32 year = 6;
   */
  year?: number;
};

/**
 * Describes the message musync.QueryTracksRequest.
 * Use `create(QueryTracksRequestSchema)` to create a new message.
 */
export const QueryTracksRequestSchema: GenMessage<QueryTracksRequest> = /*@__PURE__*/
  messageDesc(file_musync, 16);

/**
 * @generated from message musync.TrackUpdate
 */
export type TrackUpdate = Message<"musync.TrackUpdate"> & {
  /**
   * Id of the track to be updated
   *
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * New title of the track
   *
   * @generated from field: optional string title = 2;
   */
  title?: string;

  /**
   * New artist of the track
   *
   * @generated from field: optional string artist = 3;
   */
  artist?: string;

  /**
   * New album of the track
   *
   * @generated from field: optional string album = 4;
   */
  album?: string;

  /**
   * @generated from field: optional uint32 duration = 5;
   */
  duration?: number;

  /**
   * New genre of the track
   *
   * @generated from field: optional string genre = 6;
   */
  genre?: string;

  /**
   * New year of the track
   *
   * @generated from field: optional uint32 year = 7;
   */
  year?: number;

  /**
   * New local source of the track
   *
   * @generated from field: optional musync.LocalSource local_src = 8;
   */
  localSrc?: LocalSource;

  /**
   * New netease source of the track
   *
   * @generated from field: optional musync.NeteaseSource netease_src = 9;
   */
  neteaseSrc?: NeteaseSource;
};

/**
 * Describes the message musync.TrackUpdate.
 * Use `create(TrackUpdateSchema)` to create a new message.
 */
export const TrackUpdateSchema: GenMessage<TrackUpdate> = /*@__PURE__*/
  messageDesc(file_musync, 17);

/**
 * Update track request
 *
 * @generated from message musync.UpdateTrackRequest
 */
export type UpdateTrackRequest = Message<"musync.UpdateTrackRequest"> & {
  /**
   * @generated from field: musync.TrackUpdate update = 1;
   */
  update?: TrackUpdate;
};

/**
 * Describes the message musync.UpdateTrackRequest.
 * Use `create(UpdateTrackRequestSchema)` to create a new message.
 */
export const UpdateTrackRequestSchema: GenMessage<UpdateTrackRequest> = /*@__PURE__*/
  messageDesc(file_musync, 18);

/**
 * Update track response
 *
 * @generated from message musync.UpdateTrackResponse
 */
export type UpdateTrackResponse = Message<"musync.UpdateTrackResponse"> & {
  /**
   * Updated track
   *
   * @generated from field: musync.Track track = 1;
   */
  track?: Track;
};

/**
 * Describes the message musync.UpdateTrackResponse.
 * Use `create(UpdateTrackResponseSchema)` to create a new message.
 */
export const UpdateTrackResponseSchema: GenMessage<UpdateTrackResponse> = /*@__PURE__*/
  messageDesc(file_musync, 19);

/**
 * Delete tracks request
 *
 * @generated from message musync.DeleteTracksRequest
 */
export type DeleteTracksRequest = Message<"musync.DeleteTracksRequest"> & {
  /**
   * Ids of tracks to be deleted
   *
   * @generated from field: repeated int32 track_ids = 1;
   */
  trackIds: number[];
};

/**
 * Describes the message musync.DeleteTracksRequest.
 * Use `create(DeleteTracksRequestSchema)` to create a new message.
 */
export const DeleteTracksRequestSchema: GenMessage<DeleteTracksRequest> = /*@__PURE__*/
  messageDesc(file_musync, 20);

/**
 * Create user request
 *
 * @generated from message musync.CreateUserRequest
 */
export type CreateUserRequest = Message<"musync.CreateUserRequest"> & {
  /**
   * User to be created
   *
   * @generated from field: musync.User user = 1;
   */
  user?: User;
};

/**
 * Describes the message musync.CreateUserRequest.
 * Use `create(CreateUserRequestSchema)` to create a new message.
 */
export const CreateUserRequestSchema: GenMessage<CreateUserRequest> = /*@__PURE__*/
  messageDesc(file_musync, 21);

/**
 * Create user response
 *
 * @generated from message musync.CreateUserResponse
 */
export type CreateUserResponse = Message<"musync.CreateUserResponse"> & {
  /**
   * Created user
   *
   * @generated from field: musync.User user = 1;
   */
  user?: User;
};

/**
 * Describes the message musync.CreateUserResponse.
 * Use `create(CreateUserResponseSchema)` to create a new message.
 */
export const CreateUserResponseSchema: GenMessage<CreateUserResponse> = /*@__PURE__*/
  messageDesc(file_musync, 22);

/**
 * Query user
 *
 * @generated from message musync.QueryUsersRequest
 */
export type QueryUsersRequest = Message<"musync.QueryUsersRequest"> & {
  /**
   * Query by name
   *
   * @generated from field: optional string name = 1;
   */
  name?: string;
};

/**
 * Describes the message musync.QueryUsersRequest.
 * Use `create(QueryUsersRequestSchema)` to create a new message.
 */
export const QueryUsersRequestSchema: GenMessage<QueryUsersRequest> = /*@__PURE__*/
  messageDesc(file_musync, 23);

/**
 * @generated from message musync.UserUpdate
 */
export type UserUpdate = Message<"musync.UserUpdate"> & {
  /**
   * Id of the user to be updated
   *
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * New name of the user
   *
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message musync.UserUpdate.
 * Use `create(UserUpdateSchema)` to create a new message.
 */
export const UserUpdateSchema: GenMessage<UserUpdate> = /*@__PURE__*/
  messageDesc(file_musync, 24);

/**
 * Update user request
 *
 * @generated from message musync.UpdateUserRequest
 */
export type UpdateUserRequest = Message<"musync.UpdateUserRequest"> & {
  /**
   * @generated from field: musync.UserUpdate update = 1;
   */
  update?: UserUpdate;
};

/**
 * Describes the message musync.UpdateUserRequest.
 * Use `create(UpdateUserRequestSchema)` to create a new message.
 */
export const UpdateUserRequestSchema: GenMessage<UpdateUserRequest> = /*@__PURE__*/
  messageDesc(file_musync, 25);

/**
 * Update user response
 *
 * @generated from message musync.UpdateUserResponse
 */
export type UpdateUserResponse = Message<"musync.UpdateUserResponse"> & {
  /**
   * Updated user
   *
   * @generated from field: musync.User user = 1;
   */
  user?: User;
};

/**
 * Describes the message musync.UpdateUserResponse.
 * Use `create(UpdateUserResponseSchema)` to create a new message.
 */
export const UpdateUserResponseSchema: GenMessage<UpdateUserResponse> = /*@__PURE__*/
  messageDesc(file_musync, 26);

/**
 * Delete users request
 *
 * @generated from message musync.DeleteUsersRequest
 */
export type DeleteUsersRequest = Message<"musync.DeleteUsersRequest"> & {
  /**
   * Ids of users to be deleted
   *
   * @generated from field: repeated int32 ids = 1;
   */
  ids: number[];
};

/**
 * Describes the message musync.DeleteUsersRequest.
 * Use `create(DeleteUsersRequestSchema)` to create a new message.
 */
export const DeleteUsersRequestSchema: GenMessage<DeleteUsersRequest> = /*@__PURE__*/
  messageDesc(file_musync, 27);

/**
 * @generated from message musync.LoginRequest
 */
export type LoginRequest = Message<"musync.LoginRequest"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string type = 2;
   */
  type: string;
};

/**
 * Describes the message musync.LoginRequest.
 * Use `create(LoginRequestSchema)` to create a new message.
 */
export const LoginRequestSchema: GenMessage<LoginRequest> = /*@__PURE__*/
  messageDesc(file_musync, 28);

/**
 * @generated from message musync.AddLocalFolderRequest
 */
export type AddLocalFolderRequest = Message<"musync.AddLocalFolderRequest"> & {
  /**
   * @generated from field: string path = 1;
   */
  path: string;
};

/**
 * Describes the message musync.AddLocalFolderRequest.
 * Use `create(AddLocalFolderRequestSchema)` to create a new message.
 */
export const AddLocalFolderRequestSchema: GenMessage<AddLocalFolderRequest> = /*@__PURE__*/
  messageDesc(file_musync, 29);

/**
 * @generated from message musync.RemoveLocalFolderRequest
 */
export type RemoveLocalFolderRequest = Message<"musync.RemoveLocalFolderRequest"> & {
  /**
   * @generated from field: string path = 1;
   */
  path: string;
};

/**
 * Describes the message musync.RemoveLocalFolderRequest.
 * Use `create(RemoveLocalFolderRequestSchema)` to create a new message.
 */
export const RemoveLocalFolderRequestSchema: GenMessage<RemoveLocalFolderRequest> = /*@__PURE__*/
  messageDesc(file_musync, 30);

/**
 * @generated from message musync.AddLocalFolderResponse
 */
export type AddLocalFolderResponse = Message<"musync.AddLocalFolderResponse"> & {
  /**
   * @generated from field: uint32 added_tracks = 1;
   */
  addedTracks: number;
};

/**
 * Describes the message musync.AddLocalFolderResponse.
 * Use `create(AddLocalFolderResponseSchema)` to create a new message.
 */
export const AddLocalFolderResponseSchema: GenMessage<AddLocalFolderResponse> = /*@__PURE__*/
  messageDesc(file_musync, 31);

/**
 * @generated from message musync.RemoveLocalFolderResponse
 */
export type RemoveLocalFolderResponse = Message<"musync.RemoveLocalFolderResponse"> & {
  /**
   * @generated from field: uint32 removed_tracks = 1;
   */
  removedTracks: number;
};

/**
 * Describes the message musync.RemoveLocalFolderResponse.
 * Use `create(RemoveLocalFolderResponseSchema)` to create a new message.
 */
export const RemoveLocalFolderResponseSchema: GenMessage<RemoveLocalFolderResponse> = /*@__PURE__*/
  messageDesc(file_musync, 32);

/**
 * @generated from message musync.GetTrackRequest
 */
export type GetTrackRequest = Message<"musync.GetTrackRequest"> & {
  /**
   * @generated from field: int32 id = 1;
   */
  id: number;
};

/**
 * Describes the message musync.GetTrackRequest.
 * Use `create(GetTrackRequestSchema)` to create a new message.
 */
export const GetTrackRequestSchema: GenMessage<GetTrackRequest> = /*@__PURE__*/
  messageDesc(file_musync, 33);

/**
 * @generated from message musync.GetTrackCoverRequest
 */
export type GetTrackCoverRequest = Message<"musync.GetTrackCoverRequest"> & {
  /**
   * @generated from field: int32 track_id = 1;
   */
  trackId: number;

  /**
   * @generated from field: optional uint32 cover_idx = 2;
   */
  coverIdx?: number;
};

/**
 * Describes the message musync.GetTrackCoverRequest.
 * Use `create(GetTrackCoverRequestSchema)` to create a new message.
 */
export const GetTrackCoverRequestSchema: GenMessage<GetTrackCoverRequest> = /*@__PURE__*/
  messageDesc(file_musync, 34);

/**
 * @generated from message musync.QueryLocalFoldersRequest
 */
export type QueryLocalFoldersRequest = Message<"musync.QueryLocalFoldersRequest"> & {
};

/**
 * Describes the message musync.QueryLocalFoldersRequest.
 * Use `create(QueryLocalFoldersRequestSchema)` to create a new message.
 */
export const QueryLocalFoldersRequestSchema: GenMessage<QueryLocalFoldersRequest> = /*@__PURE__*/
  messageDesc(file_musync, 35);

/**
 * @generated from message musync.LocalFolder
 */
export type LocalFolder = Message<"musync.LocalFolder"> & {
  /**
   * @generated from field: string path = 1;
   */
  path: string;
};

/**
 * Describes the message musync.LocalFolder.
 * Use `create(LocalFolderSchema)` to create a new message.
 */
export const LocalFolderSchema: GenMessage<LocalFolder> = /*@__PURE__*/
  messageDesc(file_musync, 36);

/**
 * @generated from message musync.CreatePlayQueueRequest
 */
export type CreatePlayQueueRequest = Message<"musync.CreatePlayQueueRequest"> & {
  /**
   * @generated from field: repeated int32 track_ids = 1;
   */
  trackIds: number[];
};

/**
 * Describes the message musync.CreatePlayQueueRequest.
 * Use `create(CreatePlayQueueRequestSchema)` to create a new message.
 */
export const CreatePlayQueueRequestSchema: GenMessage<CreatePlayQueueRequest> = /*@__PURE__*/
  messageDesc(file_musync, 37);

/**
 * @generated from message musync.CreatePlayQueueResponse
 */
export type CreatePlayQueueResponse = Message<"musync.CreatePlayQueueResponse"> & {
  /**
   * @generated from field: int32 play_queue_id = 1;
   */
  playQueueId: number;
};

/**
 * Describes the message musync.CreatePlayQueueResponse.
 * Use `create(CreatePlayQueueResponseSchema)` to create a new message.
 */
export const CreatePlayQueueResponseSchema: GenMessage<CreatePlayQueueResponse> = /*@__PURE__*/
  messageDesc(file_musync, 38);

/**
 * Currently, users can only get thier own play queue
 *
 * @generated from message musync.GetPlayQueueRequest
 */
export type GetPlayQueueRequest = Message<"musync.GetPlayQueueRequest"> & {
};

/**
 * Describes the message musync.GetPlayQueueRequest.
 * Use `create(GetPlayQueueRequestSchema)` to create a new message.
 */
export const GetPlayQueueRequestSchema: GenMessage<GetPlayQueueRequest> = /*@__PURE__*/
  messageDesc(file_musync, 39);

/**
 * @generated from message musync.UpdatePlayerRequest
 */
export type UpdatePlayerRequest = Message<"musync.UpdatePlayerRequest"> & {
  /**
   * is the update triggerred by user action.
   * If this is false, it won't be broadcasted to other users.
   * Otherwise, it will be broadcasted to other users.
   *
   * @generated from field: bool manul = 1;
   */
  manul: boolean;

  /**
   * index of the current playing track in the playlist
   *
   * @generated from field: optional uint32 position = 2;
   */
  position?: number;

  /**
   * is the playlist playing
   *
   * @generated from field: optional bool playing = 3;
   */
  playing?: boolean;

  /**
   * Move the seek bar to the specified position.
   *
   * @generated from field: optional uint32 progress = 4;
   */
  progress?: number;
};

/**
 * Describes the message musync.UpdatePlayerRequest.
 * Use `create(UpdatePlayerRequestSchema)` to create a new message.
 */
export const UpdatePlayerRequestSchema: GenMessage<UpdatePlayerRequest> = /*@__PURE__*/
  messageDesc(file_musync, 40);

/**
 * @generated from message musync.UpdatePlayQueueEvent
 */
export type UpdatePlayQueueEvent = Message<"musync.UpdatePlayQueueEvent"> & {
  /**
   * @generated from field: repeated int32 track_ids = 1;
   */
  trackIds: number[];
};

/**
 * Describes the message musync.UpdatePlayQueueEvent.
 * Use `create(UpdatePlayQueueEventSchema)` to create a new message.
 */
export const UpdatePlayQueueEventSchema: GenMessage<UpdatePlayQueueEvent> = /*@__PURE__*/
  messageDesc(file_musync, 41);

/**
 * @generated from message musync.UpdatePlayerEvent
 */
export type UpdatePlayerEvent = Message<"musync.UpdatePlayerEvent"> & {
  /**
   * @generated from field: uint32 position = 1;
   */
  position: number;

  /**
   * @generated from field: bool playing = 2;
   */
  playing: boolean;

  /**
   * @generated from field: uint32 progress = 3;
   */
  progress: number;
};

/**
 * Describes the message musync.UpdatePlayerEvent.
 * Use `create(UpdatePlayerEventSchema)` to create a new message.
 */
export const UpdatePlayerEventSchema: GenMessage<UpdatePlayerEvent> = /*@__PURE__*/
  messageDesc(file_musync, 42);

/**
 * @generated from message musync.SearchAllRequest
 */
export type SearchAllRequest = Message<"musync.SearchAllRequest"> & {
  /**
   * @generated from field: string query = 1;
   */
  query: string;
};

/**
 * Describes the message musync.SearchAllRequest.
 * Use `create(SearchAllRequestSchema)` to create a new message.
 */
export const SearchAllRequestSchema: GenMessage<SearchAllRequest> = /*@__PURE__*/
  messageDesc(file_musync, 43);

/**
 * @generated from message musync.SearchAllResponse
 */
export type SearchAllResponse = Message<"musync.SearchAllResponse"> & {
  /**
   * @generated from field: repeated musync.Track db_tracks = 1;
   */
  dbTracks: Track[];

  /**
   * netease music search result
   *
   * @generated from field: repeated musync.Track ncm_tracks = 3;
   */
  ncmTracks: Track[];
};

/**
 * Describes the message musync.SearchAllResponse.
 * Use `create(SearchAllResponseSchema)` to create a new message.
 */
export const SearchAllResponseSchema: GenMessage<SearchAllResponse> = /*@__PURE__*/
  messageDesc(file_musync, 44);

/**
 * @generated from message musync.RebuildIndexRequest
 */
export type RebuildIndexRequest = Message<"musync.RebuildIndexRequest"> & {
};

/**
 * Describes the message musync.RebuildIndexRequest.
 * Use `create(RebuildIndexRequestSchema)` to create a new message.
 */
export const RebuildIndexRequestSchema: GenMessage<RebuildIndexRequest> = /*@__PURE__*/
  messageDesc(file_musync, 45);

/**
 * @generated from message musync.RebuildIndexResponse
 */
export type RebuildIndexResponse = Message<"musync.RebuildIndexResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;
};

/**
 * Describes the message musync.RebuildIndexResponse.
 * Use `create(RebuildIndexResponseSchema)` to create a new message.
 */
export const RebuildIndexResponseSchema: GenMessage<RebuildIndexResponse> = /*@__PURE__*/
  messageDesc(file_musync, 46);

/**
 * Musync service
 *
 * @generated from service musync.MusyncService
 */
export const MusyncService: GenService<{
  /**
   * @generated from rpc musync.MusyncService.Login
   */
  login: {
    methodKind: "unary";
    input: typeof LoginRequestSchema;
    output: typeof TokenSchema;
  },
  /**
   * @generated from rpc musync.MusyncService.AddLocalFolder
   */
  addLocalFolder: {
    methodKind: "unary";
    input: typeof AddLocalFolderRequestSchema;
    output: typeof AddLocalFolderResponseSchema;
  },
  /**
   * @generated from rpc musync.MusyncService.RemoveLocalFolder
   */
  removeLocalFolder: {
    methodKind: "unary";
    input: typeof RemoveLocalFolderRequestSchema;
    output: typeof RemoveLocalFolderResponseSchema;
  },
  /**
   * @generated from rpc musync.MusyncService.QueryLocalFolders
   */
  queryLocalFolders: {
    methodKind: "server_streaming";
    input: typeof QueryLocalFoldersRequestSchema;
    output: typeof LocalFolderSchema;
  },
  /**
   * @generated from rpc musync.MusyncService.CreatePlayQueue
   */
  createPlayQueue: {
    methodKind: "unary";
    input: typeof CreatePlayQueueRequestSchema;
    output: typeof CreatePlayQueueResponseSchema;
  },
  /**
   * @generated from rpc musync.MusyncService.GetPlayQueue
   */
  getPlayQueue: {
    methodKind: "unary";
    input: typeof GetPlayQueueRequestSchema;
    output: typeof PlayQueueSchema;
  },
  /**
   * @generated from rpc musync.MusyncService.CreatePlaylist
   */
  createPlaylist: {
    methodKind: "unary";
    input: typeof CreatePlaylistRequestSchema;
    output: typeof CreatePlaylistResponseSchema;
  },
  /**
   * @generated from rpc musync.MusyncService.QueryPlaylists
   */
  queryPlaylists: {
    methodKind: "server_streaming";
    input: typeof QueryPlaylistsRequestSchema;
    output: typeof PlaylistSchema;
  },
  /**
   * @generated from rpc musync.MusyncService.UpdatePlaylist
   */
  updatePlaylist: {
    methodKind: "unary";
    input: typeof UpdatePlaylistRequestSchema;
    output: typeof UpdatePlaylistResponseSchema;
  },
  /**
   * @generated from rpc musync.MusyncService.DeletePlaylists
   */
  deletePlaylists: {
    methodKind: "server_streaming";
    input: typeof DeletePlaylistsRequestSchema;
    output: typeof PlaylistSchema;
  },
  /**
   * @generated from rpc musync.MusyncService.GetTrack
   */
  getTrack: {
    methodKind: "unary";
    input: typeof GetTrackRequestSchema;
    output: typeof TrackSchema;
  },
  /**
   * @generated from rpc musync.MusyncService.GetTrackCover
   */
  getTrackCover: {
    methodKind: "unary";
    input: typeof GetTrackCoverRequestSchema;
    output: typeof PictureSchema;
  },
  /**
   * @generated from rpc musync.MusyncService.CreateTrack
   */
  createTrack: {
    methodKind: "unary";
    input: typeof CreateTrackRequestSchema;
    output: typeof CreateTrackResponseSchema;
  },
  /**
   * @generated from rpc musync.MusyncService.QueryTracks
   */
  queryTracks: {
    methodKind: "server_streaming";
    input: typeof QueryTracksRequestSchema;
    output: typeof TrackSchema;
  },
  /**
   * @generated from rpc musync.MusyncService.UpdateTrack
   */
  updateTrack: {
    methodKind: "unary";
    input: typeof UpdateTrackRequestSchema;
    output: typeof UpdateTrackResponseSchema;
  },
  /**
   * @generated from rpc musync.MusyncService.DeleteTracks
   */
  deleteTracks: {
    methodKind: "server_streaming";
    input: typeof DeleteTracksRequestSchema;
    output: typeof TrackSchema;
  },
  /**
   * @generated from rpc musync.MusyncService.CreateUser
   */
  createUser: {
    methodKind: "unary";
    input: typeof CreateUserRequestSchema;
    output: typeof CreateUserResponseSchema;
  },
  /**
   * @generated from rpc musync.MusyncService.QueryUsers
   */
  queryUsers: {
    methodKind: "server_streaming";
    input: typeof QueryUsersRequestSchema;
    output: typeof UserSchema;
  },
  /**
   * @generated from rpc musync.MusyncService.UpdateUser
   */
  updateUser: {
    methodKind: "unary";
    input: typeof UpdateUserRequestSchema;
    output: typeof UpdateUserResponseSchema;
  },
  /**
   * @generated from rpc musync.MusyncService.DeleteUsers
   */
  deleteUsers: {
    methodKind: "server_streaming";
    input: typeof DeleteUsersRequestSchema;
    output: typeof UserSchema;
  },
  /**
   * @generated from rpc musync.MusyncService.SearchAll
   */
  searchAll: {
    methodKind: "unary";
    input: typeof SearchAllRequestSchema;
    output: typeof SearchAllResponseSchema;
  },
  /**
   * @generated from rpc musync.MusyncService.RebuildIndex
   */
  rebuildIndex: {
    methodKind: "unary";
    input: typeof RebuildIndexRequestSchema;
    output: typeof RebuildIndexResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_musync, 0);

